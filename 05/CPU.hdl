// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in = instruction[15], out = notInstruction15);
    Mux16(a = ALUout, b = instruction , sel = notInstruction15, out = out1); //first MUX
    Or(a = notInstruction15, b = instruction[5], out = toregA);
    ARegister(in = out1, load = toregA, out = regA, out[0..14] = addressM); //register A
    And(a = instruction[15], b = instruction[12], out = AorM); //A or M 
    Mux16(a = regA, b = inM, sel = AorM, out = regAOrinM); 

    ALU(x = regD, y = regAOrinM, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8],
    f = instruction[7], no = instruction[6], out = ALUout, out = outM, zr = zr, ng = ng); //ALU
    
    And(a = instruction[15], b = instruction[4], out = toregD);
    DRegister(in = ALUout, load = toregD, out = regD); //register D
    
    And(a = instruction[15], b = instruction[3], out = writeM);
    
    //PC
    Not(in = zr, out = nZr); 
    Not(in = ng, out = pos); 
    And(a = instruction[15], b = instruction[0], out = GT); // greater or equal to zero (C instruction)
    And(a = pos, b = nZr, out = posNotZero); // greater than zero 
    And(a = GT, b = posNotZero, out = C1); 

    And(a = instruction[15], b = instruction[1], out = EQ); // equal to zero (C instruction)
    And(a = EQ, b = zr, out = Zero);

    And(a = instruction[15], b = instruction[2], out = LT); // lower or equal to zero (C instruction)
    And(a = ng, b = nZr, out = negNotZero); // lower than zero 
    And(a = LT, b = ng, out = C3); 

    Or(a = C1, b = Zero, out = D1); 
    Or(a = D1, b = C3, out = JMPcond); 

    PC(in = regA, load = JMPcond, inc = true, reset = reset, out[0..14] = pc);
}
