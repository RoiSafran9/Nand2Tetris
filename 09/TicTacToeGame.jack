class TicTacToeGame{

field Array board;
field int T;

constructor TicTacToeGame new(){
    do Drawings.drawBoard();
    let board = Array.new(10); // creating the array that represents the game board 
    let T = 0;
    return this;
}

method void dispose(){
    do board.dispose();
    do Memory.deAlloc(this);
    return;
}


 method void run(){
        var char key;  // the key currently pressed by the user
        var boolean exit;
        var Drawings X;
        var Drawings O;
        var int cell;
        let exit = false;
        
        while((~(T = 9)) & (~exit)){ //play until the board is full 

                if((TicTacToeGame.mod2(T)) = 0){ //even //if((T%2) = 0){ //even - X mod2
                    let key = Keyboard.readInt("time to choose X");
                    do Output.moveCursor(0,0);
                        
                        while((key < 1) | (key > 9) & (~(key = 81)) & (~(key = 0))){ //wrong key pressed
                            if(~(key = 81)){
                                do Output.printString("Please pick an empty cell or exit");
                                do Sys.wait(800);
                                do Output.moveCursor(0,0);
                                do Output.printString("                                 ");
                                do Output.moveCursor(0,0);
                                let key = Keyboard.readInt("time to choose X");
                                do Output.moveCursor(0,0);
                            } 
                        }

                            while((~(possible(key))) & (~(key = 81)) & (~(key = 0))){
                                do Output.printString("Please pick an empty cell");
                                do Sys.wait(800);
                                do Output.moveCursor(0,0);
                                do Output.printString("                         ");
                                do Output.moveCursor(0,0);
                                let key = Keyboard.readInt("time to choose X");
                                do Output.moveCursor(0,0);
                            }

                        if((~(key = 81)) & (~(key = 0))){
                            //var Drawings X;
                            let X = Drawings.new(2 ,key); //draw X
                             
                            //let cell = (key);  //////////////////////////////////////////////////////////////////////////////////////////////////////
                            let board[key] = 2;
                        //}
                            if(Victory()){
                                do Output.printString(" The X won!!! CONGRATULATIONS!!!");
                                //do Sys.wait(500);
                                do Output.moveCursor(0,0);
                                do Sys.wait(2500);
                                let exit = true; // in order to finish the game 
                            }
                        }       
                }else{
                    let key = Keyboard.readInt("time to choose O");
                        do Output.moveCursor(0,0);
                            while((key < 1) | (key > 9) & (~(key = 81)) & (~(key = 0))){ 
                                if(~(key = 81)){
                                    do Output.printString("Please pick an empty cell or exit");
                                    do Sys.wait(800);
                                    do Output.moveCursor(0,0);
                                    do Output.printString("                                 ");
                                    do Output.moveCursor(0,0);
                                    let key = Keyboard.readInt("time to choose O");
                                    do Output.moveCursor(0,0);
                                } 
                            }

                                while((~(possible(key))) & (~(key = 81)) & (~(key = 0))){
                                    do Output.printString("Please pick an empty cell");
                                    do Sys.wait(800);
                                    do Output.moveCursor(0,0);
                                    do Output.printString("                         ");
                                    do Output.moveCursor(0,0);
                                    let key = Keyboard.readInt("time to choose O");
                                    do Output.moveCursor(0,0);
                                }
                            if((~(key = 81)) & (~(key = 0))){
                                //var Drawings O;
                                let O = Drawings.new(1 ,key); //draw O
                                //let cell = (key);  //////////////////////////////////////////////////////////////////////////////////////////////////////
                                let board[key] = 1; // filling the array borad in the key spot
                                //}
                                if(Victory()){
                                    do Output.printString(" The O won!!! CONGRATULATIONS!!!");
                                    //do Sys.wait(500);
                                    do Output.moveCursor(0,0);
                                    do Sys.wait(2500);
                                    let exit = true; // in order to finish the game 
                                    }   
                            }    
                }
                let T = T+1;
                if(key = 81) { // q key = exit the game
                    let exit = true;
                    do Output.printString("Goodbye! see you next time!");
                    do Sys.wait(700);
                    do Output.moveCursor(0,0);
                    return;
                }  
                if(key = 0) { // 0 = new game
                    //let exit = true;
                    //do Output.printString("New game");
                    //do Sys.wait(500);
                    do Output.moveCursor(0,0);
                    do cleanAndrestart();
                    do run();
                }  
                
        }
                if(T = 9){
                    if (~exit){ // tie 
                        do Output.printString("The game is TIED");
                        do Sys.wait(500);
                        do Output.moveCursor(0,0);
                        let exit = true;
                    } 
                }
                let key = Keyboard.readInt("If you wish to restart press 0");
                if(key = 0 ){
                    do Output.moveCursor(0,0);
                    do cleanAndrestart();
                    do run();
                }
                
            return;
 }

    method boolean possible(char key){
        //var int i;
        if(board[key] = 0){
            return true;
        }
        else { 
            return false;
        }
    }

     method boolean Victory(){
        if((board[1] = board[2]) & (board[2] = board[3]) & ~(board[1] = 0)) { 
            do Drawings.drawWinnerLine(1, 3); 
            return true;
            } // 1--2--3
        if((board[1] = board[4]) & (board[4] = board[7]) & ~(board[1] = 0)) {
            do Drawings.drawWinnerLine(1, 7); 
            return true;
            } //1--4--7
        if((board[1] = board[5]) & (board[5] = board[9]) & ~(board[1] = 0)) {
            do Drawings.drawWinnerLine(1, 9); 
            return true;
            } //1--5--9
        if((board[2] = board[5]) & (board[5] = board[8]) & ~(board[2] = 0)) {
            do Drawings.drawWinnerLine(2, 8); 
            return true;
            } // 2--5--8
        if((board[3] = board[5]) & (board[5] = board[7]) & ~(board[3] = 0)) {
            do Drawings.drawWinnerLine(3, 7);
            return true;
            } //3--5--7
        if((board[3] = board[6]) & (board[6] = board[9]) & ~(board[3] = 0)) {
            do Drawings.drawWinnerLine(3, 9);
            return true;
            } //3--6--9
        if((board[4] = board[5]) & (board[5] = board[6]) & ~(board[4] = 0)) {
            do Drawings.drawWinnerLine(4, 6);
            return true;
            } //4--5--6
        if((board[7] = board[8]) & (board[8] = board[9]) & ~(board[7] = 0)) {
            do Drawings.drawWinnerLine(7, 9);
            return true;
             } //7--8--9
        return false;
       
     }
       /** Returns the remainder part of x/y */
    function int mod2(int x) {
        var int q;
        
        let q = Math.divide(x, 2);
        return x - (q*2);
    }

    method void cleanAndrestart(){
        var int i; 
        let i = 0;
        let T = 0;
        while((i < 10)){
            let board[i] = 0;
            let i=i+1;
        }
        do Screen.clearScreen();
        do Drawings.drawBoard();
        return;
    }
}